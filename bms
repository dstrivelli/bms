#!/usr/bin/env ruby

$: << File.join(__dir__, 'lib')

require 'sinatra'
require 'config'
require 'json'
require 'mail'
require 'roadie'

require 'bms/helpers'
require 'bms/result'

if development?
  require 'sinatra/reloader'
  require 'pry-remote'
end

register Config

get '/css/styles.css' do
  scss :styles
end

get '/' do
  redirect "/result/latest"
end

post '/email' do
  if params[:id]
    # TODO: Add 'new' option
    @result = get_result(params[:id])
  else
    @result = get_result(:latest)
  end

  if params[:to]
    # TODO: Validate email is whitelisted
    to = params[:to]
  else
    to = Settings.email.distro.to
    cc = Settings.email.distro.cc || nil
  end
  subject = "[BMS] Snapshot Report - #{Time.at(@result[:timestamp]).strftime('%Y-%m-%d %I:%M%P')}"

  # Process html body
  html = Roadie::Document.new(slim(:result, layout: :layout_email))
  html.add_css(scss(:styles))

  mail = Mail.new do
    from 'do_not_reply@va.gov'
    to to
    cc cc if defined?(cc)
    subject subject
    html_part do
      content_type 'text/html; charset=UTF-8'
      body html.transform
    end
    delivery_method :smtp, address: Settings.email.smtp.host, port: Settings.email.smtp.port
  end.deliver

  "Email sent"
end

post '/reload' do
  begin
    Process.kill :SIGHUP, worker_pid
  rescue
    'Error!'
  else
    'Reloaded!'
  end
end

get '/result/:timestamp' do
  # TODO: Validate input
  @result = get_result(params[:timestamp])
  @header = "BMS Health Report"
  @caption = Time.at(@result[:timestamp]).to_s
  slim :result
end

get '/results' do
  @results = get_results
  slim :results
end

get '/health' do
  health = { status: 'green' }
  # Check worker status
  if worker_running?
    health[:worker] = 'running'
  else
    health[:status] = 'yellow'
    health[:worker] = 'stopped'
  end
  # Check database status
  begin
    health[:last_refresh] = get_result(:latest)[:timestamp]
    health[:database] = 'running'
  rescue
    health[:status] = 'red'
    health[:database] = 'errored'
  end
  case health[:status]
  when 'yellow'
    status 501
  when 'red'
    status 503
  end
  JSON.generate(health)
end
